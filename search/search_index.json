{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python3</li> <li>Git</li> <li>Ansible</li> <li>A Docker Hub account</li> <li>At least 3 VMs with the setup described in VMs setup</li> </ul>"},{"location":"#vms-setup","title":"VMs setup","text":"<p>For the setup I used VirtualBox but it should work with any other virtualization software until your VMs have the required configuration.</p>"},{"location":"#vms-requirements","title":"VMs requirements","text":"<p>This requirement are the minimum requirements for the VMs. You can use more powerful VMs if you want.</p> <p>Jenkins VM:</p> <ul> <li>2 CPU</li> <li>2 GB RAM (2048 MB)</li> <li>30 GB disk</li> </ul> <p>Kubernetes VMs:</p> <ul> <li>4 CPU</li> <li>4 GB RAM (4096 MB)</li> <li>30 GB disk</li> </ul>"},{"location":"#create-the-vms","title":"Create the VMs","text":"<p>Create 1 VM for Jenkins and at least 2 VMs for the Kubernetes cluster.</p>"},{"location":"#creating-a-vm-with-virtualbox","title":"Creating a VM with VirtualBox","text":"<ul> <li>Open VirtualBox</li> <li>Click on \"New\"</li> <li>Name your VM</li> <li>Select your \"ISO Image\" (Ubuntu server 22.04.3 LTS in my case)</li> <li>Check \"Skip unattended installation\"</li> </ul> <ul> <li>Click on \"Next\"</li> <li>Set the memory size and CPU number according to VMs requirements</li> </ul> <ul> <li>Click on \"Next\"</li> <li>Select \"Create a virtual hard disk now\"</li> <li>Set the disk size according to VMs requirements</li> </ul> <ul> <li>Click on \"Next\"</li> <li>Then click on \"Finish\"</li> </ul>"},{"location":"#installing-ubuntu-server","title":"Installing Ubuntu server","text":"<ul> <li>Start your VM</li> <li>Select your language</li> </ul> <ul> <li>Select \"Continue without updating\"</li> <li>Then select \"Done\" until you reach the \"Configure Ubuntu archive Mirror\" screen</li> </ul> <ul> <li>Wait to see if the mirror location pass the test</li> <li>If the test pass, select \"Done\", otherwise you may have an issue with your internet connection</li> <li>Select \"Done\" until you reach the \"Storage configuration\" screen</li> <li>Select \"Done\" and then \"Continue\" on the \"Confirm destructive action\" screen</li> </ul> <p>You should now be on the \"Profile setup\" screen.</p> <ul> <li>Enter your name</li> <li>Enter your server name</li> <li>Enter your username (For all Kubernetes VMs, use the same username)</li> <li>Enter your password (For all Kubernetes VMs, use the same password)</li> </ul> <p></p> <ul> <li>Select \"Done\"</li> <li>Select \"Continue\" (We don't need Ubuntu Pro)</li> <li>Check \"Install OpenSSH server\"</li> </ul> <p></p> <ul> <li>Select \"Done\"</li> </ul> <p>You should now be on the \"Featured server snaps\" screen.</p> <p>Check nothing and select \"Done\".</p> <p>Now wait for the installation to finish.</p> <ul> <li>Select \"Reboot now\"</li> </ul> <p></p> <ul> <li>Wait for the VM to reboot</li> <li>Login with your username and password</li> <li> <p>Run <code>shutdown -h now</code> to shutdown the VM correctly</p> </li> <li> <p>Now go to the VM settings</p> </li> <li>Go to \"Network\"</li> <li>And change the \"Attached to\" to \"Bridged Adapter\"</li> </ul> <p></p> <ul> <li>Start the VM</li> <li>Login with your username and password</li> <li>Run <code>ip -c a</code> to get the IP address of your VM</li> </ul> <p></p> <p>Now repeat the same steps for the other VMs.</p>"},{"location":"#setup-the-vms","title":"Setup the VMs","text":"<p>Now clone the repository on your host machine.</p> <p>At the root of the repository, you should have a <code>deployAll.sh</code> script.</p> <p>Run this script with the IP addresses of your Kubernetes VMs as arguments (not the Jenkins VM, you will be prompted for it later).</p> <pre><code>./deployAll.sh &lt;kubernetes-vm-ip-1&gt; &lt;kubernetes-vm-ip-2&gt; ... &lt;kubernetes-vm-ip-n&gt;\n</code></pre> <p>Warning</p> <p>Prevent your host machine from going to sleep during the setup. Otherwise the setup may fail.</p> <p>Note</p> <p>The script will prompt you for more information concerning the setup of Jenkins. So check your terminal regularly.</p> <p>This script will run two sub-scripts:</p> <ul> <li><code>deployKubespray.sh</code> wich will setup Kubernetes on the Kubernetes VMs</li> <li><code>deployJenkins.sh</code> wich will setup Jenkins on the Jenkins VM</li> </ul> <p>The <code>deployKubespray.sh</code> script will clone the kubespray repository and run the <code>reset.yml</code> (to clear any previous install of kubernetes) then run the <code>cluster.yml</code> (to install kubernetes) playbook with the IP addresses of the Kubernetes VMs as arguments.</p> <p>The <code>deployJenkins.sh</code> script will prompt you for all needed information to setup Jenkins and then use the <code>jenkins.yml</code> playbook to install Jenkins on the VM.</p> <p>Once <code>deployAll.sh</code> is finished, all the VMs should be ready to use.</p> <p>If you want to reinstall Jenkins, you can run the <code>deployJenkins.sh</code> script again.</p> <p>Warning</p> <p>If you want to reinstall Kubernetes, you will have to run the <code>deployAll.sh</code> script since Jenkins needs a file from kubernetes to connect to the kubernetes cluster.</p>"},{"location":"usage/","title":"How to use","text":""},{"location":"usage/#jenkins","title":"Jenkins","text":"<p>To see how to use Jenkins, see Jenkins Usage.</p>"},{"location":"usage/#kubernetes","title":"Kubernetes","text":"<p>To see how to use Kubernetes, see Kubernetes Usage.</p>"},{"location":"usage/jenkins/","title":"Jenkins Usage","text":""},{"location":"usage/jenkins/#jenkins-access","title":"Jenkins Access","text":"<ul> <li>Go to the Jenkins VM IP address in your browser on port 8080</li> <li>The username is <code>admin</code> and the password is the one you entered during the VM setup</li> </ul> <ul> <li>You can now see all the jobs</li> <li>In the \"Whanos Base Image\" folder you can find the job to build the base image (see Whanos Images)</li> <li>In the \"Projects\" folder you can find the jobs to build the projects created with the \"link-project\" job (see Link Project)</li> </ul>"},{"location":"usage/jenkins/#whanos-images","title":"Whanos Images","text":"<p>Jenkins is linked to a docker registry (Docker Hub). When building the whanos base images (<code>whanos-&lt;language&gt;</code>), Jenkins will trigger a <code>docker build</code> command that will generate the base image for the selected languages and then push it into the registry.</p> <p>Supported languages are:</p> <ul> <li>C</li> <li>Java</li> <li>JavaScript</li> <li>Python</li> <li>Befunge</li> </ul>"},{"location":"usage/jenkins/#link-project","title":"Link Project","text":"<p>Jenkins is able to track a given <code>git</code> project.</p> <p>Under the listed jobs, select <code>link-project</code> and trigger it with arguments. Name the project you want to track and give Jenkins its URI.</p> <p>Now the project is tracked by Jenkins, it will be pulled every minute and check the latest available commit to detect changes.</p> <p>Upon changes the project will be built according to the presence of a Dockerfile in the root folder. If a Dockerfile is found, the project will be built using it. Else, Whanos will detect which language is the project based on and use one of the standalone images for this language.</p> <p>The resulting image will be hosted on the local Docker Registry used by Whanos.</p>"},{"location":"usage/jenkins/#deployment","title":"Deployment","text":"<p>You can make Jenkins deploy your application project on Kubernetes.</p> <p>In order to do it, you must provide at the root of your project a <code>whanos.yml</code> file that contains the configuration for your deployment.</p> <p>After your image is built, Jenkins will search the root folder for the <code>whanos.yml</code>. If it finds it, an order will be issued to deploy your application using the built image. Otherwise the pipeline is considered done and successful.</p>"},{"location":"usage/kubernetes/","title":"Deploy your apps","text":"<p>For you to start deploying your apps, you have to set up your repo, so it can be properly understood and deploy by the build pipeline.</p>"},{"location":"usage/kubernetes/#whanosyml","title":"Whanos.yml","text":"<p>To do that, you have to create a <code>whanos.yml</code> file at the root of your repository.</p> <p>The <code>whanos.yml</code> file can contain a <code>deployment</code> root property, which itself can contain:</p> <ul> <li><code>replicas</code> -&gt; Number of replicas to have (default: 1; 2 replicas means that 2 instances of the resulting pod must be running at the same time in the cluster);</li> <li><code>resources</code> -&gt; Resource needs, corresponding to Kubernetes\u2019 own resource specifications (default: no specifications; the syntax expected here is the same as the given link);</li> <li><code>ports</code> -&gt; An integer list of ports needed by the container to be forwarded to it (default: no ports forwarded).</li> </ul> <p>Here is an example of a <code>whanos.yml</code> file</p> <pre><code>deployment:\n    replicas: 3\n    resources:\n        limits:\n            memory: \"128M\"\n        requests:\n            memory: \"64M\"\n    ports:\n        - 3000\n</code></pre>"},{"location":"usage/kubernetes/#accessing-the-app-from-outside-the-cluster","title":"Accessing the app from outside the cluster","text":"<ul> <li>Link the project in Jenkins (see Link Project)</li> <li>Once the Jenkins jobs are finished, you can connect to one of the Kubernetes VMs</li> <li>Run <code>sudo kubectl get svc</code> to find the port on which the application is listening</li> <li>Run <code>sudo kubectl get pods -l app=YOURAPPNAME -o=jsonpath='{range .items[*]}{.status.hostIP}{\"\\n\"}{end}'</code> to get the IP address of the VM on which the application is running (replace YOURAPPNAME with the name of your application)</li> </ul> <ul> <li>Go to the IP address of the VM on which the application is running on the port you found earlier</li> <li>You should see your application</li> </ul>"}]}